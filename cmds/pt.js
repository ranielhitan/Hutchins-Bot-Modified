const axios = require('axios'); const fs = require('fs-extra'); module.exports = { name: "pt", usedby: 0, onPrefix: false, dev: "Jonell Magallanes", cooldowns: 2, dmUser: false, onLaunch: async function ({ api, event, target }) { const pathie = './cmds/cache/element.jpg'; const { threadID, messageID } = event; const element = target.join(" "); try { const hshs = await api.sendMessage("⏱️ | Finding element data. Please wait...", threadID, messageID); const response = await axios.get(`https://api.popcat.xyz/periodic-table?element=${encodeURIComponent(element)}`); const data = response.data; const imgResponse = await axios.get(data.image, { responseType: 'stream' }); const writer = fs.createWriteStream(pathie); imgResponse.data.pipe(writer); const bold = global.fonts.bold("🔎 Periodic Table"); writer.on('finish', () => { api.unsendMessage(hshs.messageID); api.sendMessage({ body: `${bold}\n${global.line}\n🔬 | Element Information:\n\n` + `Name: ${data.name}\n` + `Symbol: ${data.symbol}\n` + `Atomic Number: ${data.atomic_number}\n` + `Atomic Mass: ${data.atomic_mass}\n` + `Period: ${data.period}\n` + `Phase: ${data.phase}\n` + `Discovered by: ${data.discovered_by}\n\n` + `Summary: ${data.summary}`, attachment: fs.createReadStream(pathie) }, threadID, () => fs.unlinkSync(pathie), messageID); }); writer.on('error', (error) => { api.sendMessage(`❎ | ${error}`, threadID, messageID); }); } catch (error) { api.sendMessage(`❎ | ${error}`, threadID, messageID); } } };
